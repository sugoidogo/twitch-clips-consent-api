var C="https://api.twitch.tv/helix",v=t=>{let e=[];for(let s of Object.keys(t)){let i=t[s];Array.isArray(i)?i.forEach(a=>e.push(`${s}=${a}`)):e.push(`${s}=${i}`)}return e.join("&")},w=class{_accessToken;_clientId;constructor({accessToken:t="",clientId:e=""}={}){this._accessToken=t,this._clientId=e}async callApi({path:t,method:e="GET",params:s,body:i,requiresAuth:a=!0,options:{clientId:l,accessToken:h,requestInit:c={}}={}}){let r=s?`${C}${t}?${v(s)}`:`${C}${t}`,o={...c,method:e},E=new Headers;o.headers=E,i&&(E.set("Content-Type","application/json"),o.body=JSON.stringify(i)),a&&(o.headers.set("Authorization",`Bearer ${h||this._accessToken}`),o.headers.set("Client-Id",l||this._clientId));let d=await fetch(r,o),g=d.status,A=null;return g===200&&t==="/schedule/icalendar"?A=await d.text():g!==204&&(A=await d.json()),{ok:d.ok,status:g,data:A}}ads={startCommercial:(t,e={})=>this.callApi({path:"/channels/commercial",method:"POST",body:t,options:e}),getAdSchedule:(t,e={})=>this.callApi({path:"/channels/ads",params:t,options:e}),snoozeNextAd:(t,e={})=>this.callApi({path:"/channels/ads/schedule/snooze",method:"POST",params:t,options:e})};analytics={getExtensionAnalytics:(t=null,e={})=>this.callApi({path:"/analytics/extensions",params:t,options:e}),getGameAnalytics:(t=null,e={})=>this.callApi({path:"/analytics/games",params:t,options:e})};bits={getBitsLeaderboard:(t=null,e={})=>this.callApi({path:"/bits/leaderboard",params:t,options:e}),getCheermotes:(t=null,e={})=>this.callApi({path:"/bits/cheermotes",params:t,options:e}),getExtensionTransactions:(t,e={})=>this.callApi({path:"/extensions/transactions",params:t,options:e})};channels={getChannelInformation:(t,e={})=>this.callApi({path:"/channels",params:t,options:e}),modifyChannelInformation:(t,e=null,s={})=>this.callApi({path:"/channels",method:"PATCH",params:t,body:e,options:s}),getChannelEditors:(t,e={})=>this.callApi({path:"/channels/editors",params:t,options:e}),getFollowedChannels:(t,e={})=>this.callApi({path:"/channels/followed",params:t,options:e}),getChannelFollowers:(t,e={})=>this.callApi({path:"/channels/followers",params:t,options:e})};channelPoints={createCustomRewards:(t,e,s={})=>this.callApi({path:"/channel_points/custom_rewards",method:"POST",params:t,body:e,options:s}),deleteCustomReward:(t,e={})=>this.callApi({path:"/channel_points/custom_rewards",method:"DELETE",params:t,options:e}),getCustomReward:(t,e={})=>this.callApi({path:"/channel_points/custom_rewards",params:t,options:e}),updateCustomReward:(t,e=null,s={})=>this.callApi({path:"/channel_points/custom_rewards",method:"PATCH",params:t,body:e,options:s}),getCustomRewardRedemption:(t,e={})=>this.callApi({path:"/channel_points/custom_rewards/redemptions",params:t,options:e}),updateRedemptionStatus:(t,e,s={})=>this.callApi({path:"/channel_points/custom_rewards/redemptions",method:"PATCH",params:t,body:e,options:s})};charity={getCharityCampaign:(t,e={})=>this.callApi({path:"/charity/campaigns",params:t,options:e}),getCharityCampaignDonations:(t,e={})=>this.callApi({path:"/charity/donations",params:t,options:e})};chat={getChatters:(t,e={})=>this.callApi({path:"/chat/chatters",params:t,options:e}),getChannelEmotes:(t,e={})=>this.callApi({path:"/chat/emotes",params:t,options:e}),getGlobalEmotes:(t={})=>this.callApi({path:"/chat/emotes/global",options:t}),getEmoteSets:(t,e={})=>this.callApi({path:"/chat/emotes/set",params:t,options:e}),getChannelChatBadges:(t,e={})=>this.callApi({path:"/chat/badges",params:t,options:e}),getGlobalChatBadges:(t={})=>this.callApi({path:"/chat/badges/global",options:t}),getChatSettings:(t,e={})=>this.callApi({path:"/chat/settings",params:t,options:e}),updateChatSettings:(t,e=null,s={})=>this.callApi({path:"/chat/settings",method:"PATCH",params:t,body:e,options:s}),getSharedChatSession:(t,e={})=>this.callApi({path:"/shared_chat/session",params:t,options:e}),getUserEmotes:(t,e={})=>this.callApi({path:"/chat/emotes/user",params:t,options:e}),sendChatAnnouncement:(t,e,s={})=>this.callApi({path:"/chat/announcements",method:"POST",params:t,body:e,options:s}),sendShoutout:(t,e={})=>this.callApi({path:"/chat/shoutouts",method:"POST",params:t,options:e}),sendChatMessage:(t,e={})=>this.callApi({path:"/chat/messages",method:"POST",body:t,options:e}),getUserChatColor:(t,e={})=>this.callApi({path:"/chat/color",params:t,options:e}),updateUserChatColor:(t,e={})=>this.callApi({path:"/chat/color",method:"PUT",params:t,options:e})};clips={createClip:(t,e={})=>this.callApi({path:"/clips",method:"POST",params:t,options:e}),getClips:(t=null,e={})=>this.callApi({path:"/clips",params:t,options:e})};conduits={getConduits:(t={})=>this.callApi({path:"/eventsub/conduits",options:t}),createConduits:(t,e={})=>this.callApi({path:"/eventsub/conduits",method:"POST",body:t,options:e}),updateConduits:(t,e={})=>this.callApi({path:"/eventsub/conduits",method:"PATCH",body:t,options:e}),deleteConduit:(t,e={})=>this.callApi({path:"/eventsub/conduits",method:"DELETE",params:t,options:e}),getConduitShards:(t,e={})=>this.callApi({path:"/eventsub/conduits/shards",params:t,options:e}),updateConduitShards:(t,e={})=>this.callApi({path:"/eventsub/conduits/shards",method:"PATCH",body:t,options:e})};ccls={getContentClassificationLabels:(t=null,e={})=>this.callApi({path:"/content_classification_labels",params:t,options:e})};entitlements={getDropsEntitlements:(t=null,e={})=>this.callApi({path:"/entitlements/drops",params:t,options:e}),updateDropsEntitlements:(t=null,e={})=>this.callApi({path:"/entitlements/drops",method:"PATCH",body:t,options:e})};extensions={getExtensionConfigurationSegment:(t,e={})=>this.callApi({path:"/extensions/configurations",params:t,options:e}),setExtensionConfigurationSegment:(t,e={})=>this.callApi({path:"/extensions/configurations",method:"PUT",body:t,options:e}),setExtensionRequiredConfiguration:(t,e,s={})=>this.callApi({path:"/extensions/required_configuration",method:"PUT",params:t,body:e,options:s}),sendExtensionPubSubMessage:(t,e={})=>this.callApi({path:"/extensions/pubsub",method:"POST",body:t,options:e}),getExtensionLiveChannels:(t,e={})=>this.callApi({path:"/extensions/live",params:t,options:e}),getExtensionSecrets:(t={})=>this.callApi({path:"/extensions/jwt/secrets",options:t}),createExtensionSecret:(t,e={})=>this.callApi({path:"/extensions/jwt/secrets",method:"POST",params:t,options:e}),sendExtensionChatMessage:(t,e,s={})=>this.callApi({path:"/extensions/chat",method:"POST",params:t,body:e,options:s}),getExtensions:(t,e={})=>this.callApi({path:"/extensions",params:t,options:e}),getReleasedExtensions:(t,e={})=>this.callApi({path:"/extensions/released",params:t,options:e}),getExtensionBitsProducts:(t=null,e={})=>this.callApi({path:"/bits/extensions",params:t,options:e}),updateExtensionBitsProduct:(t,e={})=>this.callApi({path:"/bits/extensions",method:"PUT",body:t,options:e})};eventSub={createEventSubSubscription:(t,e={})=>this.callApi({path:"/eventsub/subscriptions",method:"POST",body:t,options:e}),deleteEventSubSubscription:(t,e={})=>this.callApi({path:"/eventsub/subscriptions",method:"DELETE",params:t,options:e}),getEventSubSubscriptions:(t=null,e={})=>this.callApi({path:"/eventsub/subscriptions",params:t,options:e})};games={getTopGames:(t=null,e={})=>this.callApi({path:"/games/top",params:t,options:e}),getGames:(t=null,e={})=>this.callApi({path:"/games",params:t,options:e})};goals={getCreatorGoals:(t,e={})=>this.callApi({path:"/goals",params:t,options:e})};guestStar={getChannelGuestStarSettings:(t,e={})=>this.callApi({path:"/guest_star/channel_settings",params:t,options:e}),updateChannelGuestStarSettings:(t,e=null,s={})=>this.callApi({path:"/guest_star/channel_settings",method:"PUT",params:t,body:e,options:s}),getGuestStarSession:(t,e={})=>this.callApi({path:"/guest_star/session",params:t,options:e}),createGuestStarSession:(t,e={})=>this.callApi({path:"/guest_star/session",method:"POST",params:t,options:e}),endGuestStarSession:(t,e={})=>this.callApi({path:"/guest_star/session",method:"DELETE",params:t,options:e}),getGuestStarInvites:(t,e={})=>this.callApi({path:"/guest_star/invites",params:t,options:e}),sendGuestStarInvite:(t,e={})=>this.callApi({path:"/guest_star/invites",method:"POST",params:t,options:e}),deleteGuestStarInvite:(t,e={})=>this.callApi({path:"/guest_star/invites",method:"DELETE",params:t,options:e}),assignGuestStarSlot:(t,e={})=>this.callApi({path:"/guest_star/slot",method:"POST",params:t,options:e}),updateGuestStarSlot:(t,e={})=>this.callApi({path:"/guest_star/slot",method:"PATCH",params:t,options:e}),deleteGuestStarSlot:(t,e={})=>this.callApi({path:"/guest_star/slot",method:"DELETE",params:t,options:e}),updateGuestStarSlotSettings:(t,e={})=>this.callApi({path:"/guest_star/slot_settings",method:"PATCH",params:t,options:e})};hypeTrain={getHypeTrainEvents:(t,e={})=>this.callApi({path:"/hypetrain/events",params:t,options:e}),getHypeTrainStatus:(t,e={})=>this.callApi({path:"/hypetrain/status",params:t,options:e})};moderation={checkAutoModStatus:(t,e,s={})=>this.callApi({path:"/moderation/enforcements/status",method:"POST",params:t,body:e,options:s}),manageHeldAutoModMessages:(t,e={})=>this.callApi({path:"/moderation/automod/message",method:"POST",body:t,options:e}),getAutoModSettings:(t,e={})=>this.callApi({path:"/moderation/automod/settings",params:t,options:e}),updateAutoModSettings:(t,e=null,s={})=>this.callApi({path:"/moderation/automod/settings",method:"PUT",params:t,body:e,options:s}),getBannedUsers:(t,e={})=>this.callApi({path:"/moderation/banned",params:t,options:e}),banUser:(t,e,s={})=>this.callApi({path:"/moderation/bans",method:"POST",params:t,body:e,options:s}),unbanUser:(t,e={})=>this.callApi({path:"/moderation/bans",method:"DELETE",params:t,options:e}),getUnbanRequests:(t,e={})=>this.callApi({path:"/moderation/unban_requests",params:t,options:e}),resolveUnbanRequests:(t,e={})=>this.callApi({path:"/moderation/unban_requests",method:"PATCH",params:t,options:e}),getBlockedTerms:(t,e={})=>this.callApi({path:"/moderation/blocked_terms",params:t,options:e}),addBlockedTerm:(t,e,s={})=>this.callApi({path:"/moderation/blocked_terms",method:"POST",params:t,body:e,options:s}),removeBlockedTerm:(t,e={})=>this.callApi({path:"/moderation/blocked_terms",method:"DELETE",params:t,options:e}),deleteChatMessages:(t,e={})=>this.callApi({path:"/moderation/chat",method:"DELETE",params:t,options:e}),getModeratedChannels:(t,e={})=>this.callApi({path:"/moderation/channels",params:t,options:e}),getModerators:(t,e={})=>this.callApi({path:"/moderation/moderators",params:t,options:e}),addChannelModerator:(t,e={})=>this.callApi({path:"/moderation/moderators",method:"POST",params:t,options:e}),removeChannelModerator:(t,e={})=>this.callApi({path:"/moderation/moderators",method:"DELETE",params:t,options:e}),getVIPs:(t,e={})=>this.callApi({path:"/channels/vips",params:t,options:e}),addChannelVIP:(t,e={})=>this.callApi({path:"/channels/vips",method:"POST",params:t,options:e}),removeChannelVIP:(t,e={})=>this.callApi({path:"/channels/vips",method:"DELETE",params:t,options:e}),updateShieldModeStatus:(t,e,s={})=>this.callApi({path:"/moderation/shield_mode",method:"PUT",params:t,body:e,options:s}),getShieldModeStatus:(t,e={})=>this.callApi({path:"/moderation/shield_mode",params:t,options:e}),warnChatUser:(t,e,s={})=>this.callApi({path:"/moderation/warnings",method:"POST",params:t,body:e,options:s})};polls={getPolls:(t,e={})=>this.callApi({path:"/polls",params:t,options:e}),createPoll:(t,e={})=>this.callApi({path:"/polls",method:"POST",body:t,options:e}),endPoll:(t,e={})=>this.callApi({path:"/polls",method:"PATCH",body:t,options:e})};predictions={getPredictions:(t,e={})=>this.callApi({path:"/predictions",params:t,options:e}),createPrediction:(t,e={})=>this.callApi({path:"/predictions",method:"POST",body:t,options:e}),endPrediction:(t,e={})=>this.callApi({path:"/predictions",method:"PATCH",body:t,options:e})};raids={startRaid:(t=null,e={})=>this.callApi({path:"/raids",method:"POST",params:t,options:e}),cancelRaid:(t,e={})=>this.callApi({path:"/raids",method:"DELETE",params:t,options:e})};schedule={getChannelStreamSchedule:(t,e={})=>this.callApi({path:"/schedule",params:t,options:e}),getChannelICalendar:(t,e={})=>this.callApi({path:"/schedule/icalendar",params:t,options:e}),updateChannelStreamSchedule:(t,e={})=>this.callApi({path:"/schedule/settings",method:"PATCH",params:t,options:e}),createChannelStreamScheduleSegment:(t,e,s={})=>this.callApi({path:"/schedule/segment",method:"POST",params:t,body:e,options:s}),updateChannelStreamScheduleSegment:(t,e=null,s={})=>this.callApi({path:"/schedule/segment",method:"PATCH",params:t,body:e,options:s}),deleteChannelStreamScheduleSegment:(t,e={})=>this.callApi({path:"/schedule/segment",method:"DELETE",params:t,options:e})};search={searchCategories:(t,e={})=>this.callApi({path:"/search/categories",params:t,options:e}),searchChannels:(t,e={})=>this.callApi({path:"/search/channels",params:t,options:e})};streams={getStreamKey:(t,e={})=>this.callApi({path:"/streams/key",params:t,options:e}),getStreams:(t=null,e={})=>this.callApi({path:"/streams",params:t,options:e}),getFollowedStreams:(t,e={})=>this.callApi({path:"/streams/followed",params:t,options:e}),createStreamMarker:(t,e={})=>this.callApi({path:"/streams/markers",method:"POST",body:t,options:e}),getStreamMarkers:(t=null,e={})=>this.callApi({path:"/streams/markers",params:t,options:e})};subscriptions={getBroadcasterSubscriptions:(t,e={})=>this.callApi({path:"/subscriptions",params:t,options:e}),checkUserSubscription:(t,e={})=>this.callApi({path:"/subscriptions/user",params:t,options:e})};tags={getAllStreamTags:(t=null,e={})=>this.callApi({path:"/tags/streams",params:t,options:e}),getStreamTags:(t,e={})=>this.callApi({path:"/streams/tags",params:t,options:e})};teams={getChannelTeams:(t,e={})=>this.callApi({path:"/teams/channel",params:t,options:e}),getTeams:(t=null,e={})=>this.callApi({path:"/teams",params:t,options:e})};users={getUsers:(t=null,e={})=>this.callApi({path:"/users",params:t,options:e}),updateUser:(t=null,e={})=>this.callApi({path:"/users",method:"PUT",params:t,options:e}),getUserBlockList:(t,e={})=>this.callApi({path:"/users/blocks",params:t,options:e}),blockUser:(t,e={})=>this.callApi({path:"/users/blocks",method:"PUT",params:t,options:e}),unblockUser:(t,e={})=>this.callApi({path:"/users/blocks",method:"DELETE",params:t,options:e}),getUserExtensions:(t={})=>this.callApi({path:"/users/extensions/list",options:t}),getUserActiveExtensions:(t=null,e={})=>this.callApi({path:"/users/extensions",params:t,options:e}),updateUserExtensions:(t,e={})=>this.callApi({path:"/users/extensions",method:"PUT",body:t,options:e})};videos={getVideos:(t=null,e={})=>this.callApi({path:"/videos",params:t,options:e}),deleteVideos:(t,e={})=>this.callApi({path:"/videos",method:"DELETE",params:t,options:e})};whispers={sendWhisper:(t,e,s={})=>this.callApi({path:"/whispers",method:"POST",params:t,body:e,options:s})}};var n=document.querySelector("span");if(!n)throw new Error("failed to find status element, has page layout changed?");globalThis.addEventListener("error",function(t){throw n.innerHTML=String(t),t.error});globalThis.addEventListener("unhandledrejection",function(t){n.innerHTML=String(t.reason)});var b=new URLSearchParams(location.search),T=b.get("access_token");if(!T)throw new Error("missing access_token query parameter");var f=b.get("client_id");if(!f)throw new Error("missing client_id query parameter");var P=new w({accessToken:T,clientId:f}),u=await P.users.getUsers();if(!u.ok||!u.data.data[0])throw new Error("failed to fetch authorising user",{cause:u.data});var m=u.data.data[0],_=document.querySelector("h1");if(!_)throw new Error("failed to find header, has page layout changed?");_.innerHTML+=", "+m.display_name;var S=document.querySelector("form");if(!S)throw new Error("failed to find form, has page layout changed?");var p=new Headers;p.append("Authorization","OAuth "+T);p.append("client-id",f);S.onsubmit=async function(t){t.preventDefault(),n.innerHTML="building request...";let e=new URL("/consent/parameters",location.origin);new FormData(S).forEach((a,l)=>{!a||a instanceof File||(a==="on"?a="true":a=new Date(a).toISOString(),e.searchParams.append(l,a))}),n.innerHTML="submitting settings...";let i=await(await fetch(e,{headers:p,method:"POST"})).text();n.innerHTML=i};document.querySelectorAll("input").forEach(t=>{t.onchange=function(){n.innerHTML="Don't forget to save your changes"}});{let t=await fetch(new URL("/consent/parameters",location.origin),{headers:p});if(t.ok){let e=await t.text();new URLSearchParams(e).forEach((i,a)=>{let l=document.querySelector("input[name="+a+"]");if(!l){console.warn("Failed to find input element for "+a);return}if(l.type==="checkbox")l.checked=!0;else if(l.type==="datetime-local"){let h=new Date(i),c=new Date(h.getTime()-h.getTimezoneOffset()*6e4);l.value=c.toISOString().replace(":00.000Z","")}})}}var y=document.querySelector("button");if(!y)throw new Error("Failed to find test button, has layout changed?");y.onclick=async function(t){n.innerHTML="fetching your last 100 clips...";let e=await P.clips.getClips({broadcaster_id:m.id,first:100});if(!e.ok)throw new Error("failed to fetch your clips",{cause:e.data});let s=e.data.data;n.innerHTML="fetching your last 100 consented clips...";let i=new URL("/clips",location.origin);i.searchParams.append("broadcaster_id",m.id),i.searchParams.append("first","100");let a=await fetch(i,{headers:p});if(!a.ok)throw new Error("failed to fetch allowed clips",{cause:a});e.data=await a.json();let l=e.data.data.filter(r=>{for(let o of s)if(r.id===o.id)return!0;return!1}),h=s.filter(r=>{for(let o of l)if(o.id===r.id)return!1;return!0});if(n.innerHTML=h.length+" of your last "+s.length+" clips were filtered out",h.length===0)return;n.innerHTML+="... ",i=new URL("/clips/downloads",location.origin),i.searchParams.append("broadcaster_id",m.id);let c=0;for(let r of h)if(i.searchParams.append("clip_id",r.id),c++,c===10)break;a=await fetch(i,{headers:p}),a.ok?n.innerHTML+="but this server provided downloads for filtered clips anyways. This is a bug, please report it to the developer.":n.innerHTML+="and this server refused to provide downloads for filtered clips. Everything is working as expected."};n.innerHTML="You can change your settings below";
//# sourceMappingURL=data:application/json;base64,
